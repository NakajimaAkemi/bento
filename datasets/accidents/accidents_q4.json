{
    "Input": [
        {
            "method": "load_dataset",
            "input": {                
                "nrows": 30000
            },
            "input_modin_ray": {
                "sep": ",",
                "dtype": "object",
                "nrows": 30000
            },
            "input_modin_dask": {
                "sep": ",",
                "dtype": "object",
                "nrows": 30000
            },
            "input_datatable": {
                "max_nrows": 30000
            },
            "input_polars": {
                "n_rows": 30000
            },
            "input_spark": {
                "sep": ","
            },
            "input_vaex": {
                "lazy": true
            }
        },
        {
            "method": "force_execution",
            "input": {}
        }
    ],
    "Data Transformation": [
        {
            "method": "join",
            "input": {
                "other": "vehicles_df",
                "left_on": ["Accident_Index", "Vehicle_Reference"],
                "right_on": ["Accident_Index", "Vehicle_Reference"],
                "how": "left",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import pandas as pd",
                    "vehicles_df=pd.read_csv('datasets/accidents/data/Vehicles0514.csv', nrows=30000)"
                ]
            },            
            "input_modin_dask": {
                "other": "vehicles",
                "left_on": ["Accident_Index", "Vehicle_Reference"],
                "right_on": ["Accident_Index", "Vehicle_Reference"],
                "how": "left",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import pandas as pd",
                    "import modin.pandas as mpd",
                    
                    "vehicles=pd.read_csv('datasets/accidents/data/Vehicles0514_r.csv',dtype='object',nrows=30000)",
                    "vehicles=mpd.DataFrame(vehicles)"
                ]
            },
            "input_modin_ray": {
                "other":"vehicles",
                "left_on": ["Accident_Index", "Vehicle_Reference"],
                "right_on": ["Accident_Index", "Vehicle_Reference"],
                "how": "left",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import pandas as pd",
                    "import modin.pandas as mpd",
                    
                    "vehicles=pd.read_csv('datasets/accidents/data/Vehicles0514_r.csv',dtype='object',nrows=30000)",
                    "vehicles=mpd.DataFrame(vehicles)"
                ]
            },
            "input_datatable": {
                "other": "vehicles_df",
                "left_on": ["Accident_Index", "Vehicle_Reference"],
                "right_on": ["Accident_Index", "Vehicle_Reference"],
                "how": "left",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import pandas as pd",
                    "vehicles_df=pd.read_csv('datasets/accidents/data/Vehicles0514.csv', nrows=30000)",
                    "import datatable as dt",
                    "vehicles_df=dt.Frame(vehicles_df)"                    
                ]
            },
            "input_polars": {
                "other": "vehicles_df",
                "left_on": ["Accident_Index", "Vehicle_Reference"],
                "right_on": ["Accident_Index", "Vehicle_Reference"],
                "how": "left",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import pandas as pd",
                    "vehicles_df=pd.read_csv('datasets/accidents/data/Vehicles0514.csv', nrows=30000)",
                    "import polars as pl",
                    "vehicles_df=pl.from_pandas(vehicles_df).lazy()"                    
                ]
            },
            "input_spark": {
                "other": "accident_df",
                "left_on": [
                    "Accident_Index"
                ],
                "right_on": [
                    "Accident_Index"
                ],
                "how": "inner",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "from pyspark.sql import DataFrame, SparkSession",
                    "sparkSession=SparkSession.builder.getOrCreate()",
                    "accident_df = sparkSession.read.csv('datasets/accidents/data/Accidents0514.csv', header=True, inferSchema=True)",
                    "accident_df.persist()"
                ]
            },
            "input_pyspark_pandas": {
                "other": "accident_df",
                "left_on": [
                    "Accident_Index"
                ],
                "right_on": [
                    "Accident_Index"
                ],
                "how": "inner",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import pyspark.pandas as pd",
                    "accident_df = pd.read_csv('datasets/accidents/data/Accidents0514.csv')"
                ]
            },
            "input_vaex": {
                "other": "accident_df",
                "left_on": 
                    "Accident_Index",
                
                "right_on": 
                    "Accident_Index"
                ,
                "how": "inner",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import vaex",
                    "accident_df = vaex.read_csv('datasets/accidents/data/Accidents0514.csv')"
                ]
            }
        },
        {
            "method": "join",
            "input": {
                "other": "accident_df",
                "left_on": "Accident_Index",
                "right_on": "Accident_Index",
                "how": "left",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import pandas as pd",
                    "accident_df=pd.read_csv('datasets/accidents/data/Accidents0514.csv', nrows=30000)"
                ]
            },
            "input_modin_dask": {
                "other": "accident_df",
                "left_on": "Accident_Index",
                "right_on": "Accident_Index",
                "req_compile": [
                    "other"
                ],             
                "extra_commands": [
                    "import pandas as pd",
                    "import modin.pandas as mpd",
                    "accident_df=pd.read_csv('datasets/accidents/data/Accidents0514_r.csv',dtype='object',nrows=30000)",
                    "accident_df=mpd.DataFrame(accident_df)"
                ]
            },
            "input_modin_ray": {
                "other": "accident_df",
                "left_on": "Accident_Index",
                "right_on": "Accident_Index",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import pandas as pd",
                    "import modin.pandas as mpd",
                    "accident_df=pd.read_csv('datasets/accidents/data/Accidents0514_r.csv',dtype='object',nrows=30000)",
                    "accident_df=mpd.DataFrame(accident_df)"
                ]
            },
            "input_datatable": {
                "other": "accident_df",
                "left_on": "Accident_Index",
                "right_on": "Accident_Index",
                "how": "left",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import pandas as pd",
                    "accident_df=pd.read_csv('datasets/accidents/data/Accidents0514.csv', nrows=30000)",
                    "import datatable as dt",
                    "accident_df=dt.Frame(accident_df)"                    
                ]
            },
            "input_polars": {
                "other": "accident_df",
                "left_on": "Accident_Index",
                "right_on": "Accident_Index",
                "how": "left",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import pandas as pd",
                    "accident_df=pd.read_csv('datasets/accidents/data/Accidents0514.csv', nrows=30000)",
                    "import polars as pl",
                    "accident_df=pl.from_pandas(accident_df).lazy()"                    
                ]
            },
            "input_spark": {
                "other": "vehicle_df",
                "left_on": [
                    "Accident_Index"
                ],
                "right_on": [
                    "Accident_Index"
                ],
                "how": "inner",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "from pyspark.sql import DataFrame, SparkSession",
                    "sparkSession=SparkSession.builder.getOrCreate()",
                    "vehicle_df = sparkSession.read.csv('datasets/accidents/data/Vehicles0514.csv', header=True, inferSchema=True)",
                    "vehicle_df.persist()"
                ]
            },
            "input_pyspark_pandas": {
                "other": "vehicle_df",
                "left_on": [
                    "Accident_Index"
                ],
                "right_on": [
                    "Accident_Index"
                ],
                "how": "inner",
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import pyspark.pandas as pd",
                    "vehicle_df = pd.read_csv('datasets/accidents/data/Vehicles0514.csv')"
                ]
            },
            "input_vaex": {
                "other": "vehicle_df",
                "left_on": 
                    "Accident_Index",
                
                "right_on": 
                    "Accident_Index"
                ,
                "how": "inner",
                "rprefix": "V_",
                "allow_duplication": true,
                "req_compile": [
                    "other"
                ],
                "extra_commands": [
                    "import vaex",
                    "vehicle_df = vaex.read_csv('datasets/accidents/data/Vehicles0514.csv')",
                    "vehicle_df.rename('Was_Vehicle_Left_Hand_Drive?', 'Was_Vehicle_Left_Hand_Drive')",
                    "vehicle_df.rename('Engine_Capacity_(CC)', 'Engine_Capacity_CC')"
                ]
            }
        },        
        {
            "method": "delete_columns",
            "input": {
                "columns": ["LSOA_of_Accident_Location"]
            }
        },
        {
            "method": "calc_column",
                "input": {
                    "col_name": "Month",
                    "columns": ["Date"],
                    "f": "lambda date_str: int(str(date_str).split('/')[1])"
                }
        },
        {
            "method": "calc_column",
                "input": {
                    "col_name": "Hour",
                    "columns": ["Time"],
                    "f": "lambda s: str(s.tolist())[2:4]"    
                },
                "input_polars": {
                    "col_name": "Hour",
                    "columns": ["Time"],
                    "f": "lambda s: 'IS A SLICE' if type(s) == pl.DataFrame.slice else s['Time'][0:2]"
                },
                "input_vaex": {
                    "col_name": "Hour",
                    "columns": [ "Time"],
                    "f": "lambda s: s[0:2]"    
                },
                "input_spark": {
                    "col_name": "Hour",
                    "columns": [ "Time"],
                    "f": "lambda s: str(s)[11:13]"    
                },
                "input_pyspark_pandas": {
                    "col_name": "Hour",
                    "columns": [ "Time"],
                    "f": "lambda s: str(s)[18:20]"   
                }
        },
        {
            "method":"loc",
            "input": {
                "column_list": [
                    "Vehicle_Type",
                    "Age_of_Vehicle",
                    "Was_Vehicle_Left_Hand_Drive?",
                    "Propulsion_Code",
                    "Engine_Capacity_(CC)"
                ],
                "row_condition": "(self.df_.Location_Easting_OSGR.notna()) & (self.df_.Location_Northing_OSGR.notna()) & (self.df_.Longitude.notna()) & (self.df_.Latitude.notna()) & (self.df_.Time != None)"              
            },
            "input_polars": {
                "column_list": [
                    "Vehicle_Type",
                    "Age_of_Vehicle",
                    "Was_Vehicle_Left_Hand_Drive?",
                    "Propulsion_Code",
                    "Engine_Capacity_(CC)"
                ],
                "row_condition": "(pl.col('Location_Easting_OSGR') != None) & (pl.col('Location_Northing_OSGR') != None) & (pl.col('Longitude') != None) & (pl.col('Latitude') != None) & (pl.col('Time') != None)",
                "extra_commands": [
                    "import polars as pl"
                ]
            },
            "input_datatable": {
                "column_list": [
                    "Vehicle_Type",
                    "Age_of_Vehicle",
                    "Was_Vehicle_Left_Hand_Drive?",
                    "Propulsion_Code",
                    "Engine_Capacity_(CC)"
                ],
                "row_condition": "(dt.f.Location_Easting_OSGR != None) & (dt.f.Location_Northing_OSGR != None) & (dt.f.Longitude != None) & (dt.f.Latitude != None) & (dt.f.Time != None)"
            },
            "input_modin_dask": {
                "column_list": [
                    "Vehicle_Type",
                    "Age_of_Vehicle",
                    "Was_Vehicle_Left_Hand_Drive?",
                    "Propulsion_Code",
                    "Engine_Capacity_(CC)"
                ],
                "row_condition": "(self.df_.Location_Easting_OSGR.notna()) & (self.df_.Location_Northing_OSGR.notna()) & (self.df_.Longitude.notna()) & (self.df_.Latitude.notna()) & (self.df_.Time!= None)"  
            },
            "input_modin_ray":{
                "column_list": [
                    "Vehicle_Type",
                    "Age_of_Vehicle",
                    "Was_Vehicle_Left_Hand_Drive?",
                    "Propulsion_Code",
                    "Engine_Capacity_(CC)"
                ],
                "row_condition": "(self.df_.Location_Easting_OSGR.notna()) & (self.df_.Location_Northing_OSGR.notna()) & (self.df_.Longitude.notna()) & (self.df_.Latitude.notna()) & (self.df_.Time!= None)" 
            },
            "input_pyspark_pandas":{
                "column_list":["Vehicle_Type","Age_of_Vehicle","Was_Vehicle_Left_Hand_Drive?","Propulsion_Code","Engine_Capacity_(CC)"] 
            },
            "input_spark":{
                "column_list":["Vehicle_Type","Age_of_Vehicle","Was_Vehicle_Left_Hand_Drive?","Propulsion_Code","Engine_Capacity_(CC)"]
            },
            "input_vaex":{
                "column_list":["Vehicle_Type","Age_of_Vehicle","Was_Vehicle_Left_Hand_Drive","Propulsion_Code","Engine_Capacity_CC"]
            }
        },
        {
            "method": "force_execution",
            "input": {}
        }
    ],
    "EDA": [
        {
            "method": "query",
            "input": {
                "inplace": true,
                "query": "Vehicle_Type != -1 and Age_of_Vehicle != -1 and Age_of_Vehicle != -1 and Propulsion_Code != -1 and `Engine_Capacity_(CC)` != -1 and `Was_Vehicle_Left_Hand_Drive?` != -1"
            },
            "input_polars": {
                "inplace": true,
                "query": "(pl.col('Vehicle_Type') != -1) & (pl.col('Age_of_Vehicle') != -1) & (pl.col('Propulsion_Code') != -1) & (pl.col('Engine_Capacity_(CC)') != -1) & (pl.col('Was_Vehicle_Left_Hand_Drive?') != -1)",
                "req_compile": [
                    "query"
                ],
                "extra_commands": [
                    "import polars as pl"
                ]
            },
            "input_datatable": {
                "inplace": true,
                "query": "(dt.f.Vehicle_Type != -1) & (dt.f.Age_of_Vehicle != -1) & (dt.f.Propulsion_Code != -1) & (dt.f['Engine_Capacity_(CC)'] != -1) & (dt.f['Was_Vehicle_Left_Hand_Drive?'] != -1)"                
            },
            "input_modin_dask": {
                "inplace": true,
                "query": "(Vehicle_Type!='-1.0') and Age_of_Vehicle != '-1.0' and Propulsion_Code!='-1.0' and ('Engine_Capacity_(CC)' != '-1.0') and ('Was_Vehicle_Left_Hand_Drive?' != '-1.0')"
            },            
            "input_modin_ray":{
                "inplace":true,
                "query": "(Vehicle_Type!='-1.0') and Age_of_Vehicle != '-1.0' and Propulsion_Code!='-1.0' and ('Engine_Capacity_(CC)' != '-1.0') and ('Was_Vehicle_Left_Hand_Drive?' != '-1.0')"
            },
            "input_spark": {
                "inplace": true,
                "query": "(Vehicle_Type != -1) and (Age_of_Vehicle != -1) and (`Was_Vehicle_Left_Hand_Drive?` != -1) and (Propulsion_Code != -1) and (`Engine_Capacity_(CC)` != -1)"
            },            
            "input_pyspark_pandas": {
                "inplace": true,
                "query": "(Vehicle_Type != -1) and (Age_of_Vehicle != -1) and (`Was_Vehicle_Left_Hand_Drive?` != -1) and (Propulsion_Code != -1) and (`Engine_Capacity_(CC)` != -1)"
            },
            "input_vaex": {
                "inplace": true,
                "query": "(Vehicle_Type != -1) & (Age_of_Vehicle != -1) & (Was_Vehicle_Left_Hand_Drive != -1) & (Propulsion_Code != -1) & (Engine_Capacity_CC != -1)"
            }
        },           
        {
            "method": "force_execution",
            "input": {}
        }
    ],
    "Data Cleaning": [
        {
            "method": "replace",
            "input": {
                "columns": ["Vehicle_Type"],
                "to_replace": [
                    1, 2, 3, 4, 5, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 90, 97, 98
                ],
                "value": [
                    "Pedal cycle", "Motorcycle 50cc and under", "Motorcycle 125cc and under",
                    "Motorcycle over 125cc and up to 500cc", "Motorcycle over 500cc", "Taxi/Private hire car",
                    "Car", "Minibus (8 - 16 passenger seats)", "Bus or coach (17 or more pass seats)",
                    "Ridden horse", "Agricultural vehicle", "Tram", "Van / Goods 3.5 tonnes mgw or under",
                    "Goods over 3.5t. and under 7.5t", "Goods 7.5 tonnes mgw and over", "Mobility scooter",
                    "Electric motorcycle", "Other vehicle", "Motorcycle - unknown cc", "Goods vehicle - unknown weight"
                ],                
                "regex": false
            },
            "input_modin_dask": {
                "columns": [
                    "Vehicle_Type"
                ],
                "to_replace": [
                    "1", "2", "3", "4", "5", "8", "9", "10", "11", "16", "17", "18", "19", "20", "21", "22", "23", "90", "97", "98"
                ],
                "value": [
                    "Pedal cycle", "Motorcycle 50cc and under", "Motorcycle 125cc and under",
                    "Motorcycle over 125cc and up to 500cc", "Motorcycle over 500cc", "Taxi/Private hire car",
                    "Car", "Minibus (8 - 16 passenger seats)", "Bus or coach (17 or more pass seats)",
                    "Ridden horse", "Agricultural vehicle", "Tram", "Van / Goods 3.5 tonnes mgw or under",
                    "Goods over 3.5t. and under 7.5t", "Goods 7.5 tonnes mgw and over", "Mobility scooter",
                    "Electric motorcycle", "Other vehicle", "Motorcycle - unknown cc", "Goods vehicle - unknown weight"
                ],                
                "regex": false
            },
            "input_modin_ray": {
                "columns": [
                    "Vehicle_Type"
                ],
                "to_replace": [
                    "1", "2", "3", "4", "5", "8", "9", "10", "11", "16", "17", "18", "19", "20", "21", "22", "23", "90", "97", "98"
                ],
                "value": [
                    "Pedal cycle", "Motorcycle 50cc and under", "Motorcycle 125cc and under",
                    "Motorcycle over 125cc and up to 500cc", "Motorcycle over 500cc", "Taxi/Private hire car",
                    "Car", "Minibus (8 - 16 passenger seats)", "Bus or coach (17 or more pass seats)",
                    "Ridden horse", "Agricultural vehicle", "Tram", "Van / Goods 3.5 tonnes mgw or under",
                    "Goods over 3.5t. and under 7.5t", "Goods 7.5 tonnes mgw and over", "Mobility scooter",
                    "Electric motorcycle", "Other vehicle", "Motorcycle - unknown cc", "Goods vehicle - unknown weight"
                ],  
                "regex": false
            }
        },
        {
            "method": "replace",
            "input": {
                "columns": [
                    "Propulsion_Code"
                ],
                "to_replace": [
                    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
                ],
                "value": [
                    "Petrol", "Heavy oil", "Electric", "Steam", "Gas", "Petrol/Gas (LPG)", "Gas/Bi-fuel", "Hybrid electric", "Gas Diesel", "New fuel technology", "Fuel cells", "Electric diesel"
                ],
                "regex": false
            },
            "input_modin_dask": {
                "columns": ["Propulsion_Code"],
                "to_replace": ["1.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "11.0", "12.0"],
                "value": ["Petrol", "Heavy oil", "Electric", "Steam", "Gas", "Petrol/Gas (LPG)", "Gas/Bi-fuel", "Hybrid electric", "Gas Diesel", "New fuel technology", "Fuel cells", "Electric diesel"],
                "regex": false
            },
            "input_modin_ray": {
                "columns": ["Propulsion_Code"],
                "to_replace": ["1.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "11.0", "12.0"],
                "value": ["Petrol", "Heavy oil", "Electric", "Steam", "Gas", "Petrol/Gas (LPG)", "Gas/Bi-fuel", "Hybrid electric", "Gas Diesel", "New fuel technology", "Fuel cells", "Electric diesel"],
                "regex": false
            }
        },
        {
            "method": "force_execution",
            "input": {}
        }
    ],
    "Output": [
        {
            "method": "to_csv",
            "input": {
                "extra_commands": [
                    "import os",
                    "if not os.path.exists('pipeline_output'): os.makedirs('pipeline_output')"
                ]
            }
        }
    ]
}